{"title":"Git快速入门","slug":"git","date":"2019-08-27T13:00:00.000Z","updated":"2020-02-16T06:37:57.481Z","comments":true,"path":"api/articles/git.json","photos":[],"link":"","excerpt":"","covers":["/img/article/git/git.png","/img/article/git/diff.png"],"keywords":"","content":"<h2 id=\"git的工作示意图\">git的工作示意图</h2>\n<p><img src=\"/img/article/git/git.png\" alt=\"image\"></p>\n<p>工作区间：我们自己创建的工程文件，在编辑器可直观显示。</p>\n<p>缓存区：提交代码，解决冲突的中转站，可以通过git shell窗口显示。</p>\n<p>本地仓库：连接本地跟远程大妈的枢纽，在不联网的情况下可以将本地的代码提交到本地仓库；缓存区是能在git shell窗口显示。</p>\n<p>远程仓库：保存我们代码的服务器，例如github，gitlab，可以登陆到服务器上看具体的信息。</p>\n<h4 id=\"正常提交代码的命令和解释\">正常提交代码的命令和解释</h4>\n<p>//如果是本地新创建的项目，需要先执行git init,表示生成本地的git管理</p>\n<p><code>git add files</code>  --添加文件，实际开发中可以使用 <code>git add -A</code>，使用-A:将新增、删除、修改的文件改动全保存至缓存区。</p>\n<p><code>git commit -m &quot;comments&quot;</code> 将代码从缓存区保存至本地仓库，并添加说明文字。</p>\n<p>//如果是本地新创建的项目，git remote add origin XXXXXX 将本地仓库与指定的远程仓库创建联系。</p>\n<p><code>push -u origin master</code> 将本地仓库代码推送至远程仓库的master分支。</p>\n<h2 id=\"git常用命令的比较和分析\">git常用命令的比较和分析</h2>\n<h4 id=\"git-clone-git-pull-git-fetch\">git clone、git pull、git fetch</h4>\n<p>git clone url 将其他仓库克隆到本地，本地存放着与远程仓库一模一样的版本库记录。</p>\n<p>git pull是拉取远程分支更新到本地仓库的操作。git pull是相当于从远程仓库获取最新版本，然后再与本地分支merge（合并）。git pull = git fetch + git merge</p>\n<p>git fetch 更新远程代码到本地仓库。当前分支指向的FETCH_HEAD。FETCH_HEAD指的是: 某个branch在服务器上的最新状态。</p>\n<p><img src=\"/img/article/git/diff.png\" alt=\"image\"></p>\n<h4 id=\"git-diff\">git diff</h4>\n<p>用于比较两次修改的差异</p>\n<p>git diff HEAD – <file>  查看工作区和版本库里面最新版本的区别</file></p>\n<h4 id=\"git-reset\">git reset</h4>\n<p>git reset --hard HEAD^ 回退到上一个版本</p>\n<p>git reset --hard commitId(具体版本的id)  回退到指定版本</p>\n<h4 id=\"git-checkout\">git checkout</h4>\n<p>git checkout – <file> 把文件在工作区制定文件的修改撤销</file></p>\n<p>git checkout . 把文件在工作区的修改全部撤销</p>\n<p>git checkout dev 切换到dev分支</p>\n<h4 id=\"git-branch\">git branch</h4>\n<p>git branch 查看当前分支</p>\n<p>git branch -d dev 删除dev分支</p>\n<p>git checkout -b dev 创建dev分支，然后切换到dev分支</p>\n<p>git branch -a 查看远程分支和本地分支</p>\n<h4 id=\"git-merge\">git merge</h4>\n<p>git merge dev把dev分支的工作成果合并到当前分支上</p>\n<h4 id=\"git-stash\">git stash</h4>\n<p>把当前工作现场“储藏”起来，等以后恢复现场后继续工作</p>\n<p>git stash apply 恢复“储藏”起来文件，但是恢复后，stash内容并不删除</p>\n<p>git stash drop 删除“储藏”起来文件</p>\n<p>git stash pop 恢复“储藏”起来的文件，同时把stash内容也删了</p>\n<p>git stash apply stash@{num}  指定从存储列表中删除第几个，下标从0开始</p>\n","categories":[],"tags":[{"name":"Git","slug":"Git","count":1,"path":"api/tags/Git.json"}]}