{"title":"PromQL实现一些复杂函数功能","slug":"Prometheus","date":"2019-10-10T14:00:00.000Z","updated":"2020-02-16T06:42:04.681Z","comments":true,"path":"api/articles/Prometheus.json","photos":[],"link":"","excerpt":"","covers":null,"keywords":"","content":"<h2 id=\"graphite-functions-in-promql\">graphite functions in PromQL</h2>\n<p><code>highestMax</code>, <code>mostDeviant</code>这种需要多步骤过滤的方法在<code>PromQL</code>中的一个基本思路是</p>\n<blockquote>\n<ol>\n<li>展示需要的数据</li>\n<li>and on ( tag )</li>\n<li>过滤条件</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><code>vector1 and vector2</code> results in a vector consisting of the elements of <code>vector1</code> for which there are elements in <code>vector2</code> with exactly matching label sets. Other elements are dropped. The metric name and values are carried over from the <code>left-hand side vector</code>.<br>\n一句话:  <code>and</code> 左手边的决定指标名称和值, 右手边的决定过滤条件.</p>\n</blockquote>\n<h3 id=\"highestmax-promql-example\"><code>highestMax</code> PromQL example</h3>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># show max value grouped by `endpoint`(ignore `device` tag)</span><br><span class=\"line\">max(</span><br><span class=\"line\">    clamp_max(sys.io.util_value&#123;env=&apos;elasticsearch&apos;, appid =&apos;100012314&apos;&#125;, 100 )</span><br><span class=\"line\">) by (appid, pool, endpoint)</span><br><span class=\"line\"></span><br><span class=\"line\"># join on `endpoint`</span><br><span class=\"line\">and on ( endpoint )</span><br><span class=\"line\"></span><br><span class=\"line\"># filtering</span><br><span class=\"line\">limitk(10, </span><br><span class=\"line\">  sort_desc(</span><br><span class=\"line\">    range_max(</span><br><span class=\"line\">    \t  clamp_max(sys.io.util_value&#123;env=&apos;elasticsearch&apos;, appid =&apos;100012314&apos;&#125;, 100)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"mostdeviant-promql-example\"><code>mostDeviant</code> PromQL example</h3>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># show max value grouped by `endpoint`(ignore `device` tag)</span><br><span class=\"line\">max(</span><br><span class=\"line\">    clamp_max(sys.io.util_value&#123;env=&apos;elasticsearch&apos;, appid =&apos;100012314&apos;&#125;, 100 )</span><br><span class=\"line\">) by (appid, pool, endpoint)</span><br><span class=\"line\"></span><br><span class=\"line\"># join on `endpoint`</span><br><span class=\"line\">and on ( endpoint )</span><br><span class=\"line\"></span><br><span class=\"line\"># filtering</span><br><span class=\"line\">limitk(10, </span><br><span class=\"line\">  sort_desc(</span><br><span class=\"line\">    # calculate range_stddev, which function is not present right now.</span><br><span class=\"line\">    # `range_avg` is necessary</span><br><span class=\"line\">    # `stddev` is more accurate than `stddev_over_time`</span><br><span class=\"line\">    range_avg(</span><br><span class=\"line\">      stddev(</span><br><span class=\"line\">    \t  clamp_max(sys.io.util_value&#123;env=&apos;elasticsearch&apos;, appid =&apos;100012314&apos;&#125;, 100)</span><br><span class=\"line\">      ) by (endpoint)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></div>","categories":[],"tags":[{"name":"Prometheus","slug":"Prometheus","count":1,"path":"api/tags/Prometheus.json"}]}