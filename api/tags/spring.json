{"name":"spring","slug":"spring","count":1,"posts":[{"title":"Spring源码阅读笔记(一)","slug":"Spring源码解读(一)","date":"2019-10-03T10:40:27.000Z","updated":"2020-02-22T13:23:44.909Z","comments":true,"pin":null,"path":"api/articles/Spring源码解读(一).json","excerpt":"","keywords":null,"cover":"/img/article/spring/DefaultListableBeanFactory.png","content":"<h2 id=\"spring源码阅读笔记一\">Spring源码阅读笔记(一)</h2>\n<h3 id=\"1-bean工程\">1. Bean工程</h3>\n<h4 id=\"1-defaultlistenablebeanfactory\">(1) DefaultListenableBeanFactory</h4>\n<p><img src=\"/img/article/spring/DefaultListableBeanFactory.png\" alt=\"\"></p>\n<h4 id=\"2-xmlbeandefinitionreader\">(2) XmlBeanDefinitionReader</h4>\n<p>主要包含以下几步的处理：</p>\n<ul>\n<li>通过继承自AbstractBeanDefinitionReader中的方法，来使用ResourceLoader将资源文件路径转换为对应的Resoure文件；</li>\n<li>通过DocumentLoader对Resource文件进行转换，将Resource文件转换为Document文件；</li>\n<li>通过实现接口BeanDefinitionDocumentReader的DefaultBeanDefinitionDocumentReader类对Document进行解析，并使用BeanDefinitionParserDelegate对Element进行解析。</li>\n</ul>\n<h4 id=\"3-xmlbeanfactory\">(3) XmlBeanFactory</h4>\n<ul>\n<li>构造Resource资源文件的实例对象</li>\n<li><code>this.reader.loadBeanDefinitions(resource)</code>完成资源加载</li>\n</ul>\n<h5 id=\"resource是如何封装的呢\"><code>Resource是如何封装的呢？</code></h5>\n<p>Resource接口抽象了所有Spring内部使用到的底层资源，包括：File/URL/Classpath等，并且提供了存在性、可读性、是否处于打开状态等方法，提供了不同资源到URL/URI/File类型的转换，以及基于当前资源创建一个相对资源的方法。</p>\n<ul>\n<li>\n<p><code>loadBeanDefinitions</code> —&gt; <code>doBeanDefinitions</code>:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tDocument doc = doLoadDocument(inputSource, resource);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">\"Loaded \"</span> + count + <span class=\"string\">\" bean definitions from \"</span> + resource);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (SAXParseException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Line \"</span> + ex.getLineNumber() + <span class=\"string\">\" in XML document from \"</span> + resource + <span class=\"string\">\" is invalid\"</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (SAXException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"XML document from \"</span> + resource + <span class=\"string\">\" is invalid\"</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Parser configuration exception parsing XML from \"</span> + resource, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"IOException parsing XML document from \"</span> + resource, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Unexpected exception parsing XML document from \"</span> + resource, ex);</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>doBeanDefinitions</code>的主要工作：</p>\n<ul>\n<li>\n<p>获取XML的验证模式</p>\n</li>\n<li>\n<p>加载XML文件，并得到对应的Document；</p>\n</li>\n<li>\n<p>根据返回的Document注册Bean信息。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"获取xml的验证模式\">获取XML的验证模式</h5>\n<p>XML文件的验证模式保证了XML文件的正确性，常用的有DTD和XSD两种。</p>\n<p>Spring用来检测验证模式的方法就是判断文本中是否包含DOCTYPE，如果包含就是DTD，否则就是XSD。</p>\n<h5 id=\"获取document\">获取Document</h5>\n<p>通过SAX解析XML文档，并且EntityResolver使得程序能够在项目本身中寻找DTD声明，避免网络下载的漫长时间或网络中断造成的报错。</p>\n<h5 id=\"根据document注册bean信息\">根据Document注册Bean信息</h5>\n","text":"Spring源码阅读笔记(一)1. Bean工程(1) DefaultListenableBeanFactory [Figure] doBeanDefinitions的主要工作：获取XML的验证模式加载XML文件，并得到对应的Document；根据返回的Document注册Bea","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"spring","slug":"spring","count":1,"path":"api/tags/spring.json"}]}]}