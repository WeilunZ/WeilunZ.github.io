{"total":14,"pageSize":10,"pageCount":2,"data":[{"title":"Centos7.3安装Mysql8","slug":"mysql-install","date":"2020-03-07T04:15:30.000Z","updated":"2020-03-07T12:55:00.180Z","comments":true,"pin":null,"path":"api/articles/mysql-install.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"centos7安装mysql8\">Centos7安装Mysql8</h2>\n<h3 id=\"1安装\">1.安装</h3>\n<ul>\n<li>\n<p>系统版本：Centos7</p>\n</li>\n<li>\n<p>Mysql版本：Mysql8.0</p>\n</li>\n<li>\n<p>安装方式：yum</p>\n</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">wget https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm </span><br><span class=\"line\"></span><br><span class=\"line\">sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install mysql-community-server</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl start mysqld.service</span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl status mysqld.service</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"切换版本\">切换版本</h4>\n<p>如果想要更换版本，可以先查看当前mysql yum repository中所有mysql版本</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure></div>\n<p>切换版本</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --<span class=\"built_in\">disable</span> mysql80-community</span><br><span class=\"line\">sudo yum-config-manager --<span class=\"built_in\">enable</span> mysql57-community</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"2修改密码\">2.修改密码</h3>\n<ol>\n<li>Mysql第一次启动后会创建超级管理员账号<code>root@localhost</code>，初始密码存储在日志文件中：</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo grep `temporary password` /var/<span class=\"built_in\">log</span>/mysqld.log</span><br></pre></td></tr></table></figure></div>\n<ol start=\"2\">\n<li>修改默认密码</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\"><span class=\"comment\"># &gt; password: &lt;输入你的初始密码&gt;</span></span><br><span class=\"line\">alter user <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> identified by <span class=\"string\">'&lt;new password&gt;'</span></span><br><span class=\"line\"><span class=\"comment\"># 注意这里的新密码需要符合策略，包含数字、大小写字母、特殊字符。</span></span><br></pre></td></tr></table></figure></div>\n<ol start=\"3\">\n<li>修改默认策略</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; <span class=\"built_in\">set</span> global validate_password_policy=0;</span><br></pre></td></tr></table></figure></div>\n<p>此时可能报错提示</p>\n<p><code>ERROR 1193 (HY000): Unknown system variable 'validate_password_policy'</code></p>\n<p>原因是<code>validate_password_policy</code>默认没有被激活，解决如下：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; select plugin_name, plugin_status from information_schema.plugins <span class=\"built_in\">where</span> plugin_name like <span class=\"string\">'validate%'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql &gt; install plugin validate_password soname <span class=\"string\">'validate_password.so'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql &gt; mysql&gt; select plugin_name, plugin_status from information_schema.plugins <span class=\"built_in\">where</span> plugin_name like <span class=\"string\">'validate%'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">SHOW VARIABLES LIKE <span class=\"string\">'validate_password%'</span>;</span><br></pre></td></tr></table></figure></div>\n<p>首先查找plugin中是否包含validatexxx，返回empty set说明不包含，安装后即可，接着重新运行：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; <span class=\"built_in\">set</span> global validate_password_policy=0;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql &gt; <span class=\"built_in\">set</span> global validate_password_length=8;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql &gt; alter user <span class=\"string\">'root'</span>@<span class=\"string\">'localhost'</span> identified by <span class=\"string\">'12345678'</span>;</span><br></pre></td></tr></table></figure></div>\n<p>修改成功</p>\n<h3 id=\"3允许用户远程访问\">3.允许用户远程访问</h3>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql &gt; CREATE USER <span class=\"string\">'test_user'</span>@<span class=\"string\">'%'</span> IDENTIFIED BY <span class=\"string\">'12345678'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql &gt; GRANT ALL ON *.* TO <span class=\"string\">'test_user'</span>@<span class=\"string\">'%'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql &gt; ALTER USER <span class=\"string\">'test_user'</span>@<span class=\"string\">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class=\"string\">'12345678'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">mysql &gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></div>\n<p>完事后IDE下测试数据库连接成功！</p>\n","text":"Centos7安装Mysql81.安装系统版本：Centos7Mysql版本：Mysql8.0安装方式：yum1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>#!/bin/bash<br>wget https://dev.my","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/tags/Mysql.json"}]},{"title":"/dev/stdout和/dev/stderr是什么？","slug":"stdout&stderr","date":"2020-03-07T04:15:30.000Z","updated":"2020-03-07T04:17:39.096Z","comments":true,"pin":null,"path":"api/articles/stdout&stderr.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"linux中的devstdout和devstderr\">Linux中的/dev/stdout和/dev/stderr</h2>\n<p>In the <code>/dev</code> directory, amongst the disks, TTYs, <code>urandom</code>s, and other pseudo-devices, are the files <code>/dev/stdin</code>, <code>/dev/stdout</code> and <code>/dev/stderr</code>. What are they, and what are they good for?</p>\n<p>You may have heard of standard in, standard out and standard error, the three “standard streams” which each UNIX process usually has attached to it on start. For example, <code>cat</code> run with no arguments reads from standard in and writes to standard out (achieving nothing):</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo hello | cat | tr &apos;[a-z]&apos; &apos;[A-Z]&apos;</span><br><span class=\"line\">HELLO</span><br></pre></td></tr></table></figure></div>\n<p>The standard streams don’t seem like “devices”, but there they are in <code>/dev</code>; files which any process can open, read from, and write to, just like other files. When I write to <code>/dev/stdout</code> from my shell, it’s printed to my terminal:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo hello &gt; /dev/stdout</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure></div>\n<p>Crucially, <code>/dev/stdout</code> means different things to different processes. Above, <code>/dev/stdout</code> refers to the standard out of my shell process, which is my terminal, and that’s why <code>hello</code> printed to my screen. But if I tell <code>cp</code> to write to <code>/dev/stdout</code>, it writes to its own standard out stream, not to my shell’s standard out:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ echo hello | cp /dev/stdin /dev/stdout | tr &apos;[a-z]&apos; &apos;[A-Z]&apos;</span><br><span class=\"line\">HELLO</span><br></pre></td></tr></table></figure></div>\n<p>Look at that: we got <code>cp</code>, normally used for copying files, to behave just like <code>cat</code>, which copies streams! We were able to do this by telling <code>cp</code> to use its standard streams instead of files.</p>\n<p>When building shell pipelines, this can be very useful. The following pipeline grabs a JPEG from the web, converts it to a monochrome PNG, then posts the result to another web server, without creating any temporary files:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://upload.wikimedia.org/wikipedia/en/5/52/Testcard_F.jpg \\</span><br><span class=\"line\">| convert -monochrome /dev/stdin png:/dev/stdout \\</span><br><span class=\"line\">| curl -X POST --data @/dev/stdin -H &apos;Content-Type: image/png&apos; http://requestbin.fullcontact.com/13rcezq1</span><br></pre></td></tr></table></figure></div>\n<p>Processes interact with files via file descriptors. When a process opens a file, the OS gives the process a file descriptor (a number) which the process can use to read or write from the open file. We can see this with <code>strace</code>:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat foo.txt</span><br><span class=\"line\">hello</span><br><span class=\"line\">$ strace cat foo.txt</span><br><span class=\"line\">...</span><br><span class=\"line\">open(&quot;foo.txt&quot;, O_RDONLY)               = 3</span><br><span class=\"line\">...</span><br><span class=\"line\">read(3, &quot;hello\\n&quot;, 65536)               = 6</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></div>\n<p>Here, <code>cat foo.txt</code> called <code>open(&quot;foo.txt&quot;, O_RDONLY)</code>, and the OS returned the file descriptor <code>3</code>. <code>cat</code> then read from this with <code>read(3, ...)</code>.</p>\n<p>The standard streams in, out and error are at file descriptors 0, 1 and 2 respectively. The standard streams are pre-attached; the process does not have to open them. For example, <code>cat</code> run with no arguments reads from file descriptor <code>0</code> and writes to file descriptor <code>1</code>. In a shell pipeline, these standard file descriptors are references to anonymous pipes.</p>\n<p>When we run <code>cp /dev/stdin /dev/stdout</code>, the process opens the files <code>/dev/stdin</code> and <code>/dev/stdout</code> as normal, and gets back file descriptors for them. Which numbers do you think it gets back?</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(&quot;/dev/stdin&quot;, O_RDONLY)            = 3</span><br><span class=\"line\">open(&quot;/dev/stdout&quot;, O_WRONLY|O_TRUNC)   = 4</span><br></pre></td></tr></table></figure></div>\n<p>No, it doesn’t get back 0 and 1; it gets two <em>new</em> file descriptors 3 and 4. But those new file descriptors both refer to the same underlying anonymous pipe.</p>\n","text":"Linux中的/dev/stdout和/dev/stderrIn the /dev directory, amongst the disks, TTYs, urandoms, and other pseudo-devices, are the files /dev/stdin, ","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"}]},{"title":"maven多镜像源配置","slug":"maven-multi-mirror-md","date":"2020-02-20T08:48:45.000Z","updated":"2020-02-22T03:44:33.820Z","comments":true,"pin":null,"path":"api/articles/maven-multi-mirror-md.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"场景\">场景：</h3>\n<ul>\n<li>大部分jar包可以在公司的maven mirror找到，但小部分jar包下不到</li>\n<li>需要一个主备关系的mirror，当部分jar在主镜像中找不到时，自动去副镜像找</li>\n</ul>\n<h3 id=\"方法\">方法：</h3>\n<blockquote>\n<p>参考：<a href=\"http://maven.apache.org/guides/mini/guide-mirror-settings.html\" target=\"_blank\" rel=\"noopener\">http://maven.apache.org/guides/mini/guide-mirror-settings.html</a></p>\n</blockquote>\n<p>1.找到settings.xml并打开</p>\n<blockquote>\n<p>macos : open  ~/.m2/settings.xml</p>\n</blockquote>\n<p>2.修改mirrors</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"XML\"><figure class=\"iseeu highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>nexus-aliyun<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>nexus-corp<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>*<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>public<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>公司的maven镜像地址<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure></div>\n<p><code>注意</code>:</p>\n<ul>\n<li><code>mirrorOf</code>不能有多个mirror有相同的值，否则只会使用第一个mirror</li>\n</ul>\n","text":"场景：大部分jar包可以在公司的maven mirror找到，但小部分jar包下不到需要一个主备关系的mirror，当部分jar在主镜像中找不到时，自动去副镜像找方法：参考：http://maven.apache.org/guides/mini/guide-mirror-sett","link":"","raw":null,"photos":[],"categories":[],"tags":[]},{"title":"记一次kafka故障","slug":"kafka-problem","date":"2019-10-15T05:55:16.000Z","updated":"2020-02-16T07:56:34.614Z","comments":true,"pin":null,"path":"api/articles/kafka-problem.json","excerpt":"","keywords":null,"cover":null,"content":"<h3 id=\"故障描述\">故障描述</h3>\n<blockquote>\n<p>Kafka节点9092端口健康监测突然red，并且反复重启无效。</p>\n</blockquote>\n<h3 id=\"问题分析\">问题分析</h3>\n<blockquote>\n<p>该kafka集群，由若干个用户同时<code>直接</code>进行数据写入，导致client数目非常巨大，tcp connection数量一直维持high level (60k - 70k) ；</p>\n<p>大并发量下，open file（文件句柄）过多，导致节点刚起来的时候直接打爆ulimit默认限制。</p>\n</blockquote>\n<h3 id=\"解决方案\">解决方案</h3>\n<h4 id=\"方案1iptables批量放开连接让连接慢慢分摊到别的节点上\">方案1：iptables批量放开连接，让连接慢慢分摊到别的节点上</h4>\n<p>(1) 通过iptables和ipset限制端口访问量</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># !/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">yum -y install ipset</span><br><span class=\"line\"></span><br><span class=\"line\">ipset create nodes <span class=\"built_in\">hash</span>:ip </span><br><span class=\"line\"></span><br><span class=\"line\">netstat -anp|grep xx.xx.xxx.xx:9092 |awk &#123;<span class=\"string\">'print $5'</span>&#125;|head -10000|sort -n| uniq |cut -f4 -d<span class=\"string\">\":\"</span> &gt; kafka-ip.txt</span><br><span class=\"line\"></span><br><span class=\"line\">cat kafka-ipv4.txt | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">\tipset add nodes <span class=\"variable\">$line</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -m <span class=\"built_in\">set</span> --match-set nodes src -p tcp --destination-port 9092 -j DROP</span><br><span class=\"line\">service iptables save</span><br></pre></td></tr></table></figure></div>\n<p>(2) supervisord启动kafka</p>\n<p><code>supervisorctl restart kafka</code></p>\n<p>(3) ipset remove ip</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># !/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> `seq 2 2000 10000`</span><br><span class=\"line\"><span class=\"keyword\">do</span> </span><br><span class=\"line\">\tstart=<span class=\"variable\">$i</span></span><br><span class=\"line\">\tend=`expr <span class=\"variable\">$i</span>+2000`</span><br><span class=\"line\">  sed -n <span class=\"string\">'/$start,$end/p'</span> kafka-ip.txt | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> line </span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">    ipset del nodes <span class=\"variable\">$line</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\">  sleep 2m</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">service iptables save</span><br><span class=\"line\">service iptables restart</span><br></pre></td></tr></table></figure></div>\n<p>(3) 关闭防火墙</p>\n<p><code>service iptables stop</code><br>\n此时节点已恢复.</p>\n<h4 id=\"方案2修改ulimit限制\">方案2：修改ulimit限制</h4>\n<p>第一种：临时修改正在运行的进程的限制</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># centos 6 版本的机器</span></span><br><span class=\"line\">$ <span class=\"built_in\">echo</span> -n <span class=\"string\">'Max open files=1048576:1048576'</span> &gt; /proc/&lt;PID&gt;/limits</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># centos 7 版本的机器</span></span><br><span class=\"line\">$ prlimit --nofile=1048576:1048576 --pid 130328</span><br></pre></td></tr></table></figure></div>\n<blockquote>\n<p>缺陷是一旦进程再一次挂掉，重新起来的时候max open file依然是默认值。</p>\n</blockquote>\n<p>第二种：修改系统配置，重启supervisor和kafka后永久生效</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修改 /etc/security/limits.conf</span><br><span class=\"line\">增加 * - nofile 1048576(最大文件句柄数量) 这行</span><br><span class=\"line\"></span><br><span class=\"line\">修改 /etc/security/limits.d/90-nproc.conf 或者 /etc/security/limits.d/20-nproc.conf</span><br><span class=\"line\">增加 * - nofile 1048576(最大文件句柄数量) 这行</span><br></pre></td></tr></table></figure></div>\n","text":"故障描述Kafka节点9092端口健康监测突然red，并且反复重启无效。问题分析该kafka集群，由若干个用户同时直接进行数据写入，导致client数目非常巨大，tcp connection数量一直维持high level (60k - 70k) ；大并发量下，open file","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"kafka","slug":"kafka","count":1,"path":"api/tags/kafka.json"}]},{"title":"PromQL实现一些复杂函数功能","slug":"Prometheus","date":"2019-10-10T14:00:00.000Z","updated":"2020-02-16T06:42:04.681Z","comments":true,"pin":null,"path":"api/articles/Prometheus.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"graphite-functions-in-promql\">graphite functions in PromQL</h2>\n<p><code>highestMax</code>, <code>mostDeviant</code>这种需要多步骤过滤的方法在<code>PromQL</code>中的一个基本思路是</p>\n<blockquote>\n<ol>\n<li>展示需要的数据</li>\n<li>and on ( tag )</li>\n<li>过滤条件</li>\n</ol>\n</blockquote>\n<blockquote>\n<p><code>vector1 and vector2</code> results in a vector consisting of the elements of <code>vector1</code> for which there are elements in <code>vector2</code> with exactly matching label sets. Other elements are dropped. The metric name and values are carried over from the <code>left-hand side vector</code>.<br>\n一句话:  <code>and</code> 左手边的决定指标名称和值, 右手边的决定过滤条件.</p>\n</blockquote>\n<h3 id=\"highestmax-promql-example\"><code>highestMax</code> PromQL example</h3>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># show max value grouped by `endpoint`(ignore `device` tag)</span><br><span class=\"line\">max(</span><br><span class=\"line\">    clamp_max(sys.io.util_value&#123;env=&apos;elasticsearch&apos;, appid =&apos;100012314&apos;&#125;, 100 )</span><br><span class=\"line\">) by (appid, pool, endpoint)</span><br><span class=\"line\"></span><br><span class=\"line\"># join on `endpoint`</span><br><span class=\"line\">and on ( endpoint )</span><br><span class=\"line\"></span><br><span class=\"line\"># filtering</span><br><span class=\"line\">limitk(10, </span><br><span class=\"line\">  sort_desc(</span><br><span class=\"line\">    range_max(</span><br><span class=\"line\">    \t  clamp_max(sys.io.util_value&#123;env=&apos;elasticsearch&apos;, appid =&apos;100012314&apos;&#125;, 100)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"mostdeviant-promql-example\"><code>mostDeviant</code> PromQL example</h3>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># show max value grouped by `endpoint`(ignore `device` tag)</span><br><span class=\"line\">max(</span><br><span class=\"line\">    clamp_max(sys.io.util_value&#123;env=&apos;elasticsearch&apos;, appid =&apos;100012314&apos;&#125;, 100 )</span><br><span class=\"line\">) by (appid, pool, endpoint)</span><br><span class=\"line\"></span><br><span class=\"line\"># join on `endpoint`</span><br><span class=\"line\">and on ( endpoint )</span><br><span class=\"line\"></span><br><span class=\"line\"># filtering</span><br><span class=\"line\">limitk(10, </span><br><span class=\"line\">  sort_desc(</span><br><span class=\"line\">    # calculate range_stddev, which function is not present right now.</span><br><span class=\"line\">    # `range_avg` is necessary</span><br><span class=\"line\">    # `stddev` is more accurate than `stddev_over_time`</span><br><span class=\"line\">    range_avg(</span><br><span class=\"line\">      stddev(</span><br><span class=\"line\">    \t  clamp_max(sys.io.util_value&#123;env=&apos;elasticsearch&apos;, appid =&apos;100012314&apos;&#125;, 100)</span><br><span class=\"line\">      ) by (endpoint)</span><br><span class=\"line\">    )</span><br><span class=\"line\">  )</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></div>","text":"graphite functions in PromQLhighestMax, mostDeviant这种需要多步骤过滤的方法在PromQL中的一个基本思路是展示需要的数据and on ( tag )过滤条件vector1 and vector2 results in a vec","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Prometheus","slug":"Prometheus","count":1,"path":"api/tags/Prometheus.json"}]},{"title":"Systemd使用技巧","slug":"systemd","date":"2019-10-09T12:20:31.000Z","updated":"2020-02-16T06:31:34.539Z","comments":true,"pin":null,"path":"api/articles/systemd.json","excerpt":"","keywords":null,"cover":null,"content":"<h1 id=\"systemd\">systemd</h1>\n<p>systemd的一些简单使用技巧</p>\n<h2 id=\"基本命令\">基本命令</h2>\n<p><code>systemctl</code> 命令:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status &lt;service_name&gt;         # 检查服务的状态</span><br><span class=\"line\">systemctl start &lt;service_name&gt;          # 启动服务</span><br><span class=\"line\">systemctl stop &lt;service_name&gt;           # 停止服务</span><br><span class=\"line\">systemctl enable &lt;service_name&gt;         # enable服务, 简单讲, 让服务开机就跑起来, 具体策略按服务的配置来.</span><br><span class=\"line\">systemctl disable &lt;service_name&gt;        # disable服务, 简单讲就是服务不再自动按照规定策略来跑了, 但不会停止现在已经跑起来的服务.</span><br><span class=\"line\">systemctl --daemon-reload               # 重新加载systemd的服务列表, 安装和修改`xxx.service`需要用</span><br></pre></td></tr></table></figure></div>\n<p><code>journalctl</code>命令: (#TODO)</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl                              #可以用来看日志 (TODO)</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"service-template\">service template</h2>\n<p>下边是一个通过systemd来把一些linux下的long running的进程快速配置成服务变通的办法.</p>\n<ol>\n<li>先准备一个bash脚本, 用来long running的方式启动应用.</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start.sh example.</span></span><br><span class=\"line\"><span class=\"comment\"># <span class=\"doctag\">NOTE:</span> use absolute path</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/usr/bin/sh</span></span><br><span class=\"line\">PROOT=<span class=\"string\">\"<span class=\"variable\">$( cd \"$(dirname \"$0\")</span>\"</span> ; <span class=\"built_in\">pwd</span> -P )<span class=\"string\">\"</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"variable\">$PROOT</span>/bin/prometheus \\</span></span><br><span class=\"line\"><span class=\"string\">        --storage.tsdb.path=\"</span>/var/data/prometheus/<span class=\"string\">\" \\</span></span><br><span class=\"line\"><span class=\"string\">        --config.file=\"</span><span class=\"variable\">$PROOT</span>/conf/prometheus.yml<span class=\"string\">\"</span></span><br></pre></td></tr></table></figure></div>\n<ol start=\"2\">\n<li>然后把下边的模板改改, 保存成 <code>xxxx.service</code> 放到 <code>/etc/systemd/system/</code> 下.  这个放的位置比较较粗糙.</li>\n</ol>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=prometheus</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/bin/sh -c &apos;/home/oliveagle/app/prometheus/start.sh 2&gt;&amp;1&apos;</span><br><span class=\"line\">User=oliveagle</span><br><span class=\"line\">Group=oliveagle</span><br><span class=\"line\">Restart=always</span><br><span class=\"line\">RestartSec=10</span><br><span class=\"line\"># restart service every xxx seconds.</span><br><span class=\"line\"># RuntimeMaxSec=604800</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\"># NOTE: use default.target</span><br><span class=\"line\">WantedBy=default.target</span><br></pre></td></tr></table></figure></div>\n<ol start=\"3\">\n<li>通过<code>systemctl</code>命令加载, 安装, 启动</li>\n</ol>\n","text":"systemdsystemd的一些简单使用技巧基本命令systemctl 命令:1<br>2<br>3<br>4<br>5<br>6<br>systemctl status &lt;service_name&gt;         # 检查服务的状态<br>systemctl s","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"}]},{"title":"一些有趣的Linux网站","slug":"Linux-websites","date":"2019-10-07T12:53:32.000Z","updated":"2020-02-16T07:56:18.331Z","comments":true,"pin":null,"path":"api/articles/Linux-websites.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"一些有趣的linux网站\">一些有趣的Linux网站</h2>\n<ul>\n<li><a href=\"https://github.com/aleksandar-todorovic/awesome-linux\" target=\"_blank\" rel=\"noopener\">awesome-linux列表</a> - github 上 awesome-linux 列表，里边各种linux相关的网站</li>\n<li><a href=\"https://github.com/geekwolf/free-books/blob/master/free-programming-books.md\" target=\"_blank\" rel=\"noopener\">free-programming-books</a> - 很多开发相关的免费书籍</li>\n<li><a href=\"https://bootlin.com/docs/\" target=\"_blank\" rel=\"noopener\">bootlin.com</a> - linux 内核相关\n<ul>\n<li><a href=\"https://elixir.bootlin.com/linux/v5.4/source\" target=\"_blank\" rel=\"noopener\">elixir.bootlin.com</a> - linux kernal 源码浏览</li>\n</ul>\n</li>\n<li><a href=\"https://distrowatch.com/\" target=\"_blank\" rel=\"noopener\">distrowatch.com</a> - linux 各发行版的信息</li>\n<li><a href=\"https://www.commandlinefu.com/commands/browse\" target=\"_blank\" rel=\"noopener\">commandlinefu.com</a> - linux 命令收集网站</li>\n<li><a href=\"https://explainshell.com/#\" target=\"_blank\" rel=\"noopener\">explainshell.com</a> - 解释shell命令的网站</li>\n<li><a href=\"https://www.shortcutfoo.com/\" target=\"_blank\" rel=\"noopener\">shortcutfoo.com</a> - 练习shortcut的网站</li>\n<li><a href=\"http://vim-adventures.com/\" target=\"_blank\" rel=\"noopener\">vim-adventures.com</a> - 通过RPG游戏来联系VIM的使用</li>\n<li><a href=\"http://tldp.org/LDP/Bash-Beginners-Guide/html/index.html\" target=\"_blank\" rel=\"noopener\">Bash Guide for Beginners</a> - Bash Guide for Beginners</li>\n<li><a href=\"https://coolshell.cn/\" target=\"_blank\" rel=\"noopener\">coolshell网站</a> - 酷壳</li>\n<li><a href=\"https://github.com/peco/peco\" target=\"_blank\" rel=\"noopener\">https://github.com/peco/peco</a> - 非常简单好用的交互式过滤工具</li>\n</ul>\n","text":"一些有趣的Linux网站awesome-linux列表 - github 上 awesome-linux 列表，里边各种linux相关的网站free-programming-books - 很多开发相关的免费书籍bootlin.com - linux 内核相关elixir.boo","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Linux","slug":"Linux","count":3,"path":"api/tags/Linux.json"}]},{"title":"Docker命令快速入门","slug":"Docker_commands","date":"2019-10-05T04:00:00.000Z","updated":"2020-02-16T06:31:11.644Z","comments":true,"pin":null,"path":"api/articles/Docker_commands.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"docker环境安装\">Docker环境安装</h2>\n<ul>\n<li>centos安装docker</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install docker</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>启动Docker</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"docker镜像常用命令\">Docker镜像常用命令</h2>\n<h4 id=\"下载镜像\">下载镜像</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull alpine:3.8</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"列出镜像\">列出镜像</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"BASH\"><figure class=\"iseeu highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"删除镜像\">删除镜像</h4>\n<ul>\n<li>指定名称删除镜像</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi alpine:3.8</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>指定名称删除镜像（强制）</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f alpine:3.8</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"docker容器常用命令\">Docker容器常用命令</h2>\n<h4 id=\"新建并启动容器以下命令启动一个bash终端允许用户进行交互\">新建并启动容器（以下命令启动一个bash终端，允许用户进行交互）</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -v（主机要共享的目录）:（容器上同步的目录）--name （指定数据卷容器的名称）-i -t xxxx:xxxx  /bin/bash</span><br></pre></td></tr></table></figure></div>\n<p>其中,<code>-i</code>让容器的标准输入保持打开，<code>-t</code>让Docker分配一个伪终端并绑定到容器的标准输入上，<code>--name</code>为容器指定一个名称。</p>\n<h4 id=\"启动容器2\">启动容器2</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 80:80 --name [指定容器名称] -d [镜像]</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>-d选项：表示后台运行</li>\n<li>-p选项：指定端口映射，本机80端口映射到容器80端口</li>\n</ul>\n<h4 id=\"列出容器\">列出容器</h4>\n<ul>\n<li>列出运行中的容器</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>列出所有容器</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps -a</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"停止容器\">停止容器</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># $ContainerName及$ContainerId可以用docker ps命令查询出来</span><br><span class=\"line\">docker stop $ContainerName(或者$ContainerId)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"强制停止容器\">强制停止容器</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker kill $ContainerName(或者$ContainerId)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"启动已停止的容器\">启动已停止的容器</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start $ContainerName(或者$ContainerId)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"进入容器内部的bash\">进入容器内部的bash</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it $ContainerName /bin/bash</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"删除容器\">删除容器</h4>\n<ul>\n<li>删除指定容器</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm $ContainerName(或者$ContainerId)</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>强制删除所有容器</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"查看容器的日志\">查看容器的日志</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker logs $ContainerName(或者$ContainerId)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"查看容器的ip地址\">查看容器的ip地址</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect --format &apos;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&apos; $ContainerName(或者$ContainerId)</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"同步宿主机时间到容器\">同步宿主机时间到容器</h4>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker cp /etc/localtime $ContainerName(或者$ContainerId):/etc/</span><br></pre></td></tr></table></figure></div>\n<h4 id=\"在宿主机查看docker使用cpu-内存-网络-io情况\">在宿主机查看docker使用cpu、内存、网络、io情况</h4>\n<ul>\n<li>查看指定容器情况：</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats $ContainerName(或者$ContainerId)</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>查看所有容器情况：</li>\n</ul>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stats -a</span><br></pre></td></tr></table></figure></div>\n","text":"Docker环境安装centos安装docker1<br>yum install docker<br>启动Docker1<br>systemctl start docker<br>Docker镜像常用命令下载镜像1<br>docker pull alpine:3.8<br>列出镜","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"}]},{"title":"Spring源码阅读笔记(一)","slug":"Spring源码解读(一)","date":"2019-10-03T10:40:27.000Z","updated":"2020-02-22T13:23:44.909Z","comments":true,"pin":null,"path":"api/articles/Spring源码解读(一).json","excerpt":"","keywords":null,"cover":"/img/article/spring/DefaultListableBeanFactory.png","content":"<h2 id=\"spring源码阅读笔记一\">Spring源码阅读笔记(一)</h2>\n<h3 id=\"1-bean工程\">1. Bean工程</h3>\n<h4 id=\"1-defaultlistenablebeanfactory\">(1) DefaultListenableBeanFactory</h4>\n<p><img src=\"/img/article/spring/DefaultListableBeanFactory.png\" alt=\"\"></p>\n<h4 id=\"2-xmlbeandefinitionreader\">(2) XmlBeanDefinitionReader</h4>\n<p>主要包含以下几步的处理：</p>\n<ul>\n<li>通过继承自AbstractBeanDefinitionReader中的方法，来使用ResourceLoader将资源文件路径转换为对应的Resoure文件；</li>\n<li>通过DocumentLoader对Resource文件进行转换，将Resource文件转换为Document文件；</li>\n<li>通过实现接口BeanDefinitionDocumentReader的DefaultBeanDefinitionDocumentReader类对Document进行解析，并使用BeanDefinitionParserDelegate对Element进行解析。</li>\n</ul>\n<h4 id=\"3-xmlbeanfactory\">(3) XmlBeanFactory</h4>\n<ul>\n<li>构造Resource资源文件的实例对象</li>\n<li><code>this.reader.loadBeanDefinitions(resource)</code>完成资源加载</li>\n</ul>\n<h5 id=\"resource是如何封装的呢\"><code>Resource是如何封装的呢？</code></h5>\n<p>Resource接口抽象了所有Spring内部使用到的底层资源，包括：File/URL/Classpath等，并且提供了存在性、可读性、是否处于打开状态等方法，提供了不同资源到URL/URI/File类型的转换，以及基于当前资源创建一个相对资源的方法。</p>\n<ul>\n<li>\n<p><code>loadBeanDefinitions</code> —&gt; <code>doBeanDefinitions</code>:</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"JAVA\"><figure class=\"iseeu highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\tDocument doc = doLoadDocument(inputSource, resource);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> count = registerBeanDefinitions(doc, resource);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(<span class=\"string\">\"Loaded \"</span> + count + <span class=\"string\">\" bean definitions from \"</span> + resource);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (BeanDefinitionStoreException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (SAXParseException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Line \"</span> + ex.getLineNumber() + <span class=\"string\">\" in XML document from \"</span> + resource + <span class=\"string\">\" is invalid\"</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (SAXException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> XmlBeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"XML document from \"</span> + resource + <span class=\"string\">\" is invalid\"</span>, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (ParserConfigurationException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Parser configuration exception parsing XML from \"</span> + resource, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (IOException ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"IOException parsing XML document from \"</span> + resource, ex);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanDefinitionStoreException(resource.getDescription(),</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"Unexpected exception parsing XML document from \"</span> + resource, ex);</span><br><span class=\"line\">\t\t&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>doBeanDefinitions</code>的主要工作：</p>\n<ul>\n<li>\n<p>获取XML的验证模式</p>\n</li>\n<li>\n<p>加载XML文件，并得到对应的Document；</p>\n</li>\n<li>\n<p>根据返回的Document注册Bean信息。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"获取xml的验证模式\">获取XML的验证模式</h5>\n<p>XML文件的验证模式保证了XML文件的正确性，常用的有DTD和XSD两种。</p>\n<p>Spring用来检测验证模式的方法就是判断文本中是否包含DOCTYPE，如果包含就是DTD，否则就是XSD。</p>\n<h5 id=\"获取document\">获取Document</h5>\n<p>通过SAX解析XML文档，并且EntityResolver使得程序能够在项目本身中寻找DTD声明，避免网络下载的漫长时间或网络中断造成的报错。</p>\n<h5 id=\"根据document注册bean信息\">根据Document注册Bean信息</h5>\n","text":"Spring源码阅读笔记(一)1. Bean工程(1) DefaultListenableBeanFactory [Figure] doBeanDefinitions的主要工作：获取XML的验证模式加载XML文件，并得到对应的Document；根据返回的Document注册Bea","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"spring","slug":"spring","count":1,"path":"api/tags/spring.json"}]},{"title":"Ansible入门","slug":"ansible","date":"2019-10-03T10:40:27.000Z","updated":"2020-02-16T10:54:11.945Z","comments":true,"pin":null,"path":"api/articles/ansible.json","excerpt":"","keywords":null,"cover":null,"content":"<h2 id=\"ansible快速入门\">Ansible快速入门</h2>\n<ul>\n<li>\n<p><a href=\"https://docs.ansible.com/ansible/latest/index.html\" target=\"_blank\" rel=\"noopener\"> Ansible官方文档</a></p>\n</li>\n<li>\n<p><a href=\"https://ansible-tran.readthedocs.io/en/latest/docs/\" target=\"_blank\" rel=\"noopener\">Ansible中文指南</a></p>\n</li>\n</ul>\n<p><code>以下内容以kafka,zk部署为例</code></p>\n<h3 id=\"1inventory文件\">1.Inventory文件</h3>\n<p>Ansible 可同时操作属于一个组的多台主机,组和主机之间的关系通过 inventory 文件配置. 默认的文件路径为 /etc/ansible/hosts</p>\n<p>除了默认文件外，还可以同时使用多个inventory文件。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[kafka-es-fraaws]</span><br><span class=\"line\">&lt;kafka ip 1&gt; ansible_ssh_host=&lt;kafka ip 1&gt; ansible_ssh_user=deploy broker_id=0</span><br><span class=\"line\">&lt;kafka ip 2&gt; ansible_ssh_host=&lt;kafka ip 2&gt; ansible_ssh_user=deploy broker_id=1</span><br><span class=\"line\">&lt;kafka ip 3&gt; ansible_ssh_host=&lt;kafka ip 3&gt; ansible_ssh_user=deploy broker_id=2</span><br><span class=\"line\"></span><br><span class=\"line\">[kafka-es-sfo]</span><br><span class=\"line\">&lt;kafka ip 4&gt; ansible_ssh_host=&lt;kafka ip 4&gt; ansible_ssh_user=deploy broker_id=0</span><br><span class=\"line\">&lt;kafka ip 5&gt; ansible_ssh_host=&lt;kafka ip 5&gt; ansible_ssh_user=deploy broker_id=1</span><br><span class=\"line\">&lt;kafka ip 6&gt; ansible_ssh_host=&lt;kafka ip 6&gt; ansible_ssh_user=deploy broker_id=2</span><br><span class=\"line\"></span><br><span class=\"line\">[kafka-es-sin]</span><br><span class=\"line\">&lt;kafka ip 7&gt; ansible_ssh_host=&lt;kafka ip 7&gt; ansible_ssh_user=deploy broker_id=0</span><br><span class=\"line\">&lt;kafka ip 8&gt; ansible_ssh_host=&lt;kafka ip 8&gt; ansible_ssh_user=deploy broker_id=1</span><br><span class=\"line\">&lt;kafka ip 9&gt; ansible_ssh_host=&lt;kafka ip 9&gt; ansible_ssh_user=deploy broker_id=2</span><br><span class=\"line\"></span><br><span class=\"line\">[kafka-test]</span><br><span class=\"line\">&lt;kafka ip 10&gt; ansible_ssh_host=&lt;kafka ip 10&gt; ansible_ssh_user=deploy broker_id=0</span><br><span class=\"line\">&lt;kafka ip 11&gt; ansible_ssh_host=&lt;kafka ip 11&gt; ansible_ssh_user=deploy broker_id=1</span><br></pre></td></tr></table></figure></div>\n<ul>\n<li>主机与组：[]内代表组名，用于对主机进行分类；</li>\n<li>ansible_ssh_host：有时我们想为主机起一个别名，而不是使用上面所示的ip，这时需要使用ansible_ssh_host指定别名所代表的ip；</li>\n<li>ansible_ssh_user：指定连接到目标host的哪个用户；</li>\n<li>主机变量： 给主机分配变量，如上例，为每一个主机分配broker_id，为了在配置文件中使用。</li>\n</ul>\n<p><code>其它Inventory相关知识可以前往官方文档或中文指南学习</code></p>\n<h3 id=\"2-ansible命令管理主机\">2. Ansible命令管理主机</h3>\n<p>ansible提供命令行工具，官方起名为Ad-Hoc Commands，命令的格式是：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible &lt;host-patterns&gt; [options]</span><br></pre></td></tr></table></figure></div>\n<p>常用的是检查所有远程主机环境是否可以被ansible主机访问：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping</span><br></pre></td></tr></table></figure></div>\n<p>这里的all代表<code>目标为仓库(inventory)中的所有机器</code></p>\n<p>Patterns参考链接： <a href=\"https://ansible-tran.readthedocs.io/en/latest/docs/intro_patterns.html\" target=\"_blank\" rel=\"noopener\">https://ansible-tran.readthedocs.io/en/latest/docs/intro_patterns.html</a></p>\n<p>其他命令模块参考链接： <a href=\"https://ansible-tran.readthedocs.io/en/latest/docs/intro_adhoc.html\" target=\"_blank\" rel=\"noopener\">https://ansible-tran.readthedocs.io/en/latest/docs/intro_adhoc.html</a></p>\n<h3 id=\"3-playbook\">3. Playbook</h3>\n<p>Playbooks 是 Ansible 的配置,部署,编排语言.他们可以被描述为一个需要希望远程主机执行命令的方案,或者一组IT程序运行的命令集合。在基础层面, playbooks 可以被用来管理用于部署到远程主机的配置文件。</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ── roles</span><br><span class=\"line\">|    ├──jdk</span><br><span class=\"line\">|    ├── kafka</span><br><span class=\"line\">|    |    ├── files</span><br><span class=\"line\">|    |    ├── handlers</span><br><span class=\"line\">|    |    ├── tasks</span><br><span class=\"line\">|    |    └── templates</span><br><span class=\"line\">|    ├── zk</span><br><span class=\"line\">|    └── es</span><br><span class=\"line\">└── kafka-2.3.0.yml</span><br></pre></td></tr></table></figure></div>\n<p>playbook的简单目录结构如上图所示，yml中指定任务的name，roles,和变量。而在部署任务中，一般每个role都代表一个部署的应用或工具，其中包含了tasks任务列表，一个task会在其对应所有主机上执行完毕之后，下一个task才会执行，每个task的目标在于执行一个module。</p>\n<h3 id=\"定义variable变量\">定义Variable（变量）</h3>\n<p><code>变量可以用来处理配置文件在每个节点中的个体差异和系统间的不同，以下介绍几种定义变量的形式</code></p>\n<p>（1）inventory定义变量</p>\n<p>在inventory文件中，每一个Host可以定义自己的变量，如上述Kakfa集群中每个节点的broker_id</p>\n<p>（2）在playbook中定义变量</p>\n<p>在playbook yml中可以定义变量，如：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- hosts: webservers</span><br><span class=\"line\">  vars:</span><br><span class=\"line\">    http_port: 80</span><br></pre></td></tr></table></figure></div>\n<p>（3）在文件和role中定义变量（TODO）</p>\n<p>（4）Facts变量</p>\n<p>Facts变量是自动发现的而不是用户自己设置的，通过访问远程系统获取响应信息。</p>\n<p>比如获取当前主机的ip地址：<code></code></p>\n<p>（5）魔法变量</p>\n<p>ansible会自动提供一些变量，无需定义，这些变量中重要的有<code>hostvars</code>，<code>group_names</code>，<code>groups</code></p>\n<p>其中hostvars可以让我们访问其他主机的变量，group_names是当前主机所在所有群组的列表，groups是inventory中所有群组的列表，可以用于枚举群组中的所有主机，例如：</p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% for host in groups[&apos;app_servers&apos;] %&#125;</span><br><span class=\"line\">   # something that applies to all app servers.</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>在zookeeper的部署中zoo.cfg配置文件需要用到魔法变量</code></p>\n<div class=\"highlight-wrap\"autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" contenteditable=\"true\"data-rel=\"PLAIN\"><figure class=\"iseeu highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% for host in groups[group_names[0]] %&#125;</span><br><span class=\"line\">server.&#123;&#123; hostvars[host][&apos;myid&apos;]&#125;&#125;=&#123;&#123;hostvars[host][&quot;ansible_eth0&quot;][&quot;ipv4&quot;][&quot;address&quot;]&#125;&#125;:2888:3888</span><br><span class=\"line\">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></div>\n<h3 id=\"roles\">Roles</h3>\n<p>每个组件或应用的部署可以整合成一个role，如jdk,kafka,zookeeper,es，在playbook yml中选定role去执行task</p>\n<h3 id=\"module\">Module</h3>\n<p>官方文档</p>\n<p><a href=\"https://docs.ansible.com/ansible/latest/modules/modules_by_category.html\" target=\"_blank\" rel=\"noopener\">https://docs.ansible.com/ansible/latest/modules/modules_by_category.html</a></p>\n<p>常用模块如ping,yum,template,copu,file,unarchive,command,shell</p>\n<p>可参考博客：</p>\n<p><a href=\"https://blog.csdn.net/pushiqiang/article/details/78249665\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/pushiqiang/article/details/78249665</a></p>\n<p><a href=\"http://www.yfshare.vip/2017/04/05/Ansible%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97/\" target=\"_blank\" rel=\"noopener\">http://www.yfshare.vip/2017/04/05/Ansible常用模块/</a></p>\n","text":"Ansible快速入门 Ansible官方文档Ansible中文指南以下内容以kafka,zk部署为例1.Inventory文件Ansible 可同时操作属于一个组的多台主机,组和主机之间的关系通过 inventory 文件配置. 默认的文件路径为 /etc/ansible/ho","link":"","raw":null,"photos":[],"categories":[],"tags":[{"name":"ansible","slug":"ansible","count":1,"path":"api/tags/ansible.json"}]}]}